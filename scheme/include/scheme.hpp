#pragma once

#include "definitions.h"

namespace DCPE
{
	using namespace std;

	/**
	 * @brief an implementation of the DCPE scheme
	 *
	 */
	class Scheme
	{
		private:
		const number beta;
		const number max_s;
		const number l = 64; // must be at least 2 * sizeof(number) / sizeof(byte) = 16

		/**
		 * @brief a helper that computes \f$ \lambda_m \f$ value
		 *
		 * @param key a scheme key
		 * @param nonce a nonce generated during encryption
		 * @param dimensions the number of dimensions of the message/ciphertext
		 * @return vector<VALUE_T> the \f$ \lambda_m \f$ intermediate value
		 */
		vector<VALUE_T> compute_lambda_m(key& key, bytes& nonce, size_t dimensions);

		public:
		/**
		 * @brief Construct a new Scheme object
		 *
		 * @param beta the approximation paramter \f$ \beta \f$
		 * @param max_s the maximum (min 0) value of secret \f$ s \f$ paramter (defines keyspace \f$ \mathcal{S} \f$)
		 */
		Scheme(number beta, number max_s);

		/**
		 * @brief generate a fresh key for the scheme
		 *
		 * @return key a pair of PRF key and secret \f$ s \f$ from \f$ \mathcal{S} \f$
		 */
		key keygen(bytes hash_key = bytes(), number s = -1);

		/**
		 * @brief encrypts the vector under given key
		 *
		 * @param key a scheme key generated by keygen
		 * @param message a user-supplied vector to encrypt (pointer to start)
		 * @param dimensions the number of dimensions of the vector
		 * @param ciphertext the encrypted vector (has to be allocated of length dimensions)
		 * @return bytes the nonce used in encryption
		 */
		bytes encrypt(key& key, const VALUE_T* message, size_t dimensions, VALUE_T* ciphertext);

		/**
		 * @brief decrypts the encrypted vector under given key
		 *
		 * @param key a scheme key generated by keygen
		 * @param ciphertext the encrypted vector
		 * @param dimensions the number of dimensions of the vector
		 * @param nonce the nonce used in encryption
		 * @param message the original vector (has to be allocated of length dimensions)
		 */
		void decrypt(key& key, const VALUE_T* ciphertext, size_t dimensions, bytes& nonce, VALUE_T* message);

		static size_t hash_key_size();
	};
}
