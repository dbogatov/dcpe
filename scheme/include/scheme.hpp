#pragma once

#include "definitions.h"

namespace DCPE
{
	using namespace std;

	/**
	 * @brief an implementation of the DCPE scheme
	 *
	 */
	class Scheme
	{
		private:
		const number beta;
		const number max_s;
		const number l = 64; // must be at least 2 * sizeof(number) / sizeof(byte) = 16

		/**
		 * @brief a helper that computes \f$ \lambda_m \f$ value
		 *
		 * @param key a scheme key
		 * @param nonce a nonce generated during encryption
		 * @param dimensions the number of dimensions of the message/ciphertext
		 * @return vector<double> the \f$ \lambda_m \f$ intermediate value
		 */
		vector<double> compute_lambda_m(key key, bytes nonce, size_t dimensions);

		public:
		/**
		 * @brief Construct a new Scheme object
		 *
		 * @param beta the approximation paramter \f$ \beta \f$
		 * @param max_s the maximum (min 0) value of secret \f$ s \f$ paramter (defines keyspace \f$ \mathcal{S} \f$)
		 */
		Scheme(number beta, number max_s);

		/**
		 * @brief generate a fresh key for the scheme
		 *
		 * @return key a pair of PRF key and secret \f$ s \f$ from \f$ \mathcal{S} \f$
		 */
		key keygen();

		/**
		 * @brief encrypts a mesage under given key
		 *
		 * @param key a scheme key generated by keygen
		 * @param message a user-supplied message to encrypt
		 * @return pair<vector<double>, bytes> the ciphertext: nonce and \f$ c \f$
		 */
		pair<vector<double>, bytes> encrypt(key key, vector<double> message);

		/**
		 * @brief decrypts a mesage under given key
		 *
		 * @param key a scheme key generated by keygen
		 * @param ciphertext a ciphertext generated by encrypt
		 * @return vector<double> the original message
		 */
		vector<double> decrypt(key key, pair<vector<double>, bytes> ciphertext);
	};
}
